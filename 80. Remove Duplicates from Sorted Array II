// Time Complexity : O(N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Three line explanation of solution in plain english 

/* Have a pointer and initial value set at the first element and check through the numbers, if the element at first point is equal to the previous element
add to the count other wise reset count = 1 and if the value of count is less than or = to 2 the elements get added to the array and pointer moves to the next. */

// Your code here along with comments explaining your approach


class Solution {
        public int removeDuplicates(int[] A) {
            
            if(A==null||A.length==0)
                return 0;
            
            int j=1;
            int cnt=1;
            
        for ( int i = 1; i < A.length; i++)
        {  if (A[i] == A[i-1])
            {
                cnt++; 
            }
            else{
                cnt=1;
            }
            
            if(cnt<=2)
            {
                A[j]=A[i];
                j++;
            }
        }
              
        return j;
    }

}