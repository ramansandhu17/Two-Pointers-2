// Time Complexity : O(N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Three line explanation of solution in plain english
/* Check the top right element (start from here) and as the elements are in ascending order, check if the element we 
are finding if that is lower or higher than the top right element. If higher go down the row otherwise go left within columns*/
// Your code here along with comments explaining your approach

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
         if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
        return false;

    int n = matrix.length, m = matrix[0].length;
    int i = 0, j = m - 1;
    
    while (i < n && j >= 0) {

        if (matrix[i][j] == target)
            return true;
        else if (matrix[i][j]> target)
            j--;
        else
            i++;
    }
    
    return false;
}
    
}